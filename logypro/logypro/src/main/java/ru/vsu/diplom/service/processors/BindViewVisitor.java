//package ru.vsu.diplom.service.processors;
//
//import com.squareup.javapoet.*;
//import com.sun.source.util.Trees;
//import com.sun.tools.javac.code.Flags;
//import com.sun.tools.javac.processing.JavacProcessingEnvironment;
//import com.sun.tools.javac.tree.JCTree;
//import com.sun.tools.javac.tree.TreeMaker;
//import com.sun.tools.javac.tree.TreeTranslator;
//import com.sun.tools.javac.util.Names;
//
//import javax.annotation.processing.Filer;
//import javax.annotation.processing.Messager;
//import javax.annotation.processing.ProcessingEnvironment;
//import javax.lang.model.element.ExecutableElement;
//import javax.lang.model.element.Modifier;
//import javax.lang.model.element.TypeElement;
//import javax.lang.model.element.TypeParameterElement;
//import javax.lang.model.util.ElementScanner8;
//import javax.tools.Diagnostic;
//import javax.tools.JavaFileObject;
//import java.io.BufferedWriter;
//import java.io.IOException;
//import java.io.Writer;
//
//public class BindViewVisitor extends ElementScanner8 <Void, Void> {
//
//    private final CodeBlock.Builder mFindViewById = CodeBlock.builder();
//
//    private final Trees mTrees;
//
//    private final Messager mLogger;
//
//    private final Filer mFiler;
//
//    private final TypeElement mOriginElement;
//
//    private final TreeMaker mTreeMaker;
//
//    private final Names mNames;
//
//    public BindViewVisitor(ProcessingEnvironment env, TypeElement element) {
//        super();
//        mTrees = Trees.instance(env);
//        mLogger = env.getMessager();
//        mFiler = env.getFiler();
//        mOriginElement = element;
//        final JavacProcessingEnvironment javacEnv = (JavacProcessingEnvironment) env;
//        mTreeMaker = TreeMaker.instance(javacEnv.getContext());
//        mNames = Names.instance(javacEnv.getContext());
//    }
//
//    @Override
//    public Void visitExecutable(ExecutableElement e, Void unused) {
//        ((JCTree) mTrees.getTree(e)).accept(new TreeTranslator() {
//            @Override
//            public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
//                super.visitVarDef(jcVariableDecl);
//                jcVariableDecl.mods.flags &= ~Flags.PROTECTED;
//            }
//        });
//        mFindViewById.addStatement("(($T) this).$L = ($T) findViewById($L)",
//                ClassName.get(mOriginElement),
//                field.getSimpleName(),
//                ClassName.get(field.asType()),
//                bindView.value());
//        return super.visitExecutable(e, unused);
//    }
//
//    public void brewJava() {
//        final JavaFile javaFile = JavaFile.builder(mOriginElement.getEnclosingElement().toString(), typeSpec)
//                .addFileComment("Generated by DroidCon processor, do not modify")
//                .build();
//        try {
//            final JavaFileObject sourceFile = mFiler.createSourceFile(
//                    javaFile.packageName + "." + typeSpec.name, mOriginElement);
//            try (final Writer writer = new BufferedWriter(sourceFile.openWriter())) {
//                javaFile.writeTo(writer);
//            }
//            JCTree.JCExpression selector = mTreeMaker.Ident(mNames.fromString(javaFile.packageName));
//            selector = mTreeMaker.Select(selector, mNames.fromString(typeSpec.name));
//            ((JCTree.JCClassDecl) mTrees.getTree(mOriginElement)).extending = selector;
//        } catch (IOException e) {
//            mLogger.printMessage(Diagnostic.Kind.ERROR, e.getMessage(), mOriginElement);
//        }
//    }
//
//}
