package ru.vsu.diplom.service.processors;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.sun.source.tree.IdentifierTree;
import com.sun.source.tree.TreeVisitor;
import com.sun.source.util.Trees;
import com.sun.tools.javac.code.Flags;
import com.sun.tools.javac.code.Type;
import com.sun.tools.javac.code.TypeMetadata;
import com.sun.tools.javac.code.TypeTag;
import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.tree.TreeTranslator;
import com.sun.tools.javac.util.Name;
import com.sun.tools.javac.util.SharedNameTable;
import com.sun.tools.javac.util.UnsharedNameTable;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.util.ElementScanner8;
import java.util.List;

public class ClassVisitor extends ElementScanner8<Void, Void> {

    private final CodeBlock.Builder mFindViewById = CodeBlock.builder();
    private final Trees mTrees;
    private final TypeElement mOriginElement;


    public ClassVisitor(ProcessingEnvironment env, TypeElement element) {
        super();
        mTrees = Trees.instance(env);
        mOriginElement = element;
    }

    @Override
    public Void visitExecutable(ExecutableElement e, Void unused) {
        ((JCTree) mTrees.getTree(e)).accept(new TreeTranslator() {
            @Override
            public void visitNewClass(JCTree.JCNewClass tree) {
                System.out.println("---------------b-----------------------------");
                System.out.println(tree.clazz);
                tree.clazz.accept(new TreeTranslator() {
                    @Override
                    public void visitIdent(JCTree.JCIdent identTree) {
                        super.visitIdent(identTree);
                        identTree.name = (identTree.name.table.fromString(tree.clazz.toString()+"Autogenerated"));
//                        identTree.name = SharedNameTable.create(identTree.name.table.names)
////                                .fromString(packag + "." + tree.clazz.toString()+"Autogenerated");
//                                .fromString(tree.clazz.+"Autogenerated");
                    }
                });
                super.visitNewClass(tree);
            }
        });
        return super.visitExecutable(e, unused);
    }

    @Override
    public Void visitVariable(VariableElement field, Void aVoid) {
        ((JCTree) mTrees.getTree(field)).accept(new TreeTranslator() {
            @Override
            public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
                super.visitVarDef(jcVariableDecl);
                jcVariableDecl.mods.flags &= ~Flags.PRIVATE;
            }
        });
        System.out.println("---------------a-----------------------------");
        mFindViewById.addStatement("(($T) this).$L = ($T) findViewById($L)",
                ClassName.get(mOriginElement),
                field.getSimpleName(),
                ClassName.get(field.asType()),
                "value");
        return super.visitVariable(field, aVoid);
    }

}
